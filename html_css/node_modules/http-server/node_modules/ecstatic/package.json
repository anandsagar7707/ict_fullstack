{
  "author": {
    "name": "Joshua Holbrook",
    "email": "josh@nodejitsu.com",
    "url": "http://jesusabdullah.net"
  },
  "name": "ecstatic",
  "description": "A simple static file server middleware",
  "version": "3.3.0",
  "homepage": "https://github.com/jfhbrook/node-ecstatic",
  "repository": {
    "type": "git",
    "url": "git@github.com:jfhbrook/node-ecstatic.git"
  },
  "main": "./lib/ecstatic.js",
  "scripts": {
    "fix": "eslint --fix ./lib/ ./example/ ./test",
    "pretest": "eslint ./lib/ ./example/ ./test",
    "test": "tap --jobs-auto --coverage test/*.js",
    "posttest": "tap --coverage-report=clover"
  },
  "bin": {
    "ecstatic": "./lib/ecstatic.js"
  },
  "keywords": [
    "static",
    "web",
    "server",
    "files",
    "mime",
    "middleware"
  ],
  "dependencies": {
    "he": "^1.1.1",
    "mime": "^1.6.0",
    "minimist": "^1.1.0",
    "url-join": "^2.0.5"
  },
  "devDependencies": {
    "eol": "^0.9.1",
    "eslint": "^3.19.0",
    "eslint-config-airbnb-base": "^11.3.2",
    "eslint-plugin-import": "^2.14.0",
    "express": "^4.16.3",
    "mkdirp": "^0.5.0",
    "request": "^2.88.0",
    "tap": "^12.0.1"
  },
  "license": "MIT",
  "readme": "# Ecstatic [![build status](https://secure.travis-ci.org/jfhbrook/node-ecstatic.png)](http://travis-ci.org/jfhbrook/node-ecstatic) [![codecov.io](https://codecov.io/github/jfhbrook/node-ecstatic/coverage.svg?branch=master)](https://codecov.io/github/jfhbrook/node-ecstatic?branch=master)\r\n\r\n![](http://imgur.com/vhub5.png)\r\n\r\nA simple static file server middleware. Use it with a raw http server,\r\nexpress/connect or on the CLI!\r\n\r\n# Examples:\r\n\r\n## express 4.x\r\n\r\n``` js\r\n'use strict';\r\n\r\nconst express = require('express');\r\nconst ecstatic = require('../lib/ecstatic');\r\nconst http = require('http');\r\n\r\nconst app = express();\r\n\r\napp.use(ecstatic({\r\n  root: `${__dirname}/public`,\r\n  showdir: true,\r\n}));\r\n\r\nhttp.createServer(app).listen(8080);\r\n\r\nconsole.log('Listening on :8080');\r\n```\r\n\r\n## stock http server\r\n\r\n``` js\r\n'use strict';\r\n\r\nconst http = require('http');\r\n\r\nconst ecstatic = require('../lib/ecstatic')({\r\n  root: `${__dirname}/public`,\r\n  showDir: true,\r\n  autoIndex: true,\r\n});\r\n\r\nhttp.createServer(ecstatic).listen(8080);\r\n\r\nconsole.log('Listening on :8080');\r\n```\r\n\r\n### fall through\r\nTo allow fall through to your custom routes:\r\n\r\n```js\r\necstatic({ root: __dirname + '/public', handleError: false })\r\n```\r\n\r\n## CLI\r\n\r\n```sh\r\necstatic ./public --port 8080\r\n```\r\n\r\n# Install:\r\n\r\nFor using ecstatic as a library, just npm install it into your project:\r\n\r\n```sh\r\nnpm install --save ecstatic\r\n```\r\n\r\nFor using ecstatic as a cli tool, either npm install it globally:\r\n\r\n```sh\r\nnpm install ecstatic -g\r\n```\r\n\r\nor install it locally and use npm runscripts to add it to your $PATH, or\r\nreference it directly with `./node_modules/.bin/ecstatic`.\r\n\r\n\r\n# API:\r\n\r\n## ecstatic(opts);\r\n## $ ecstatic [dir?] {options} --port PORT\r\n\r\nIn node, pass ecstatic an options hash, and it will return your middleware!\r\n\r\n```js\r\nconst opts = {\r\n  root: path.join(__dirname, 'public'),\r\n  baseDir: '/',\r\n  autoIndex: true,\r\n  showDir: true,\r\n  showDotfiles: true,\r\n  humanReadable: true,\r\n  hidePermissions: false,\r\n  si: false,\r\n  cache: 'max-age=3600',\r\n  cors: false,\r\n  gzip: true,\r\n  brotli: false,\r\n  defaultExt: 'html',\r\n  handleError: true,\r\n  serverHeader: true,\r\n  contentType: 'application/octet-stream',\r\n  weakEtags: true,\r\n  weakCompare: true,\r\n  handleOptionsMethod: false,\r\n}\r\n```\r\n\r\nIf `opts` is a string, the string is assigned to the root folder and all other\r\noptions are set to their defaults.\r\n\r\nWhen running in CLI mode, all options work as above, passed in\r\n[optimist](https://github.com/substack/node-optimist) style. `port` defaults to\r\n`8000`. If a `dir` or `--root dir` argument is not passed, ecsatic will\r\nserve the current dir. Ecstatic also respects the PORT environment variable.\r\n\r\n### `opts.root`\r\n### `--root {root}`\r\n\r\n`opts.root` is the directory you want to serve up.\r\n\r\n### `opts.port`\r\n### `--port {port}`\r\n\r\nIn CLI mode, `opts.port` is the port you want ecstatic to listen to. Defaults\r\nto 8000. This can be overridden with the `--port` flag or with the PORT\r\nenvironment variable.\r\n\r\n### `opts.baseDir`\r\n### `--baseDir {dir}`\r\n\r\n`opts.baseDir` is `/` by default, but can be changed to allow your static files\r\nto be served off a specific route. For example, if `opts.baseDir === \"blog\"`\r\nand `opts.root = \"./public\"`, requests for `localhost:8080/blog/index.html` will\r\nresolve to `./public/index.html`.\r\n\r\n### `opts.cache`\r\n### `--cache {value}`\r\n\r\nCustomize cache control with `opts.cache` , if it is a number then it will set max-age in seconds.\r\nOther wise it will pass through directly to cache-control. Time defaults to 3600 s (ie, 1 hour).\r\n\r\nIf it is a function, it will be executed on every request, and passed the pathname.  Whatever it returns, string or number, will be used as the cache control header like above.\r\n\r\n### `opts.showDir`\r\n### `--no-showDir`\r\n\r\nTurn **off** directory listings with `opts.showDir === false`. Defaults to **true**.\r\n\r\n### `opts.showDotfiles`\r\n### `--no-showDotfiles`\r\n\r\nExclude dotfiles from directory listings with `opts.showDotfiles === false`. Defaults to **true**.\r\n\r\n### `opts.humanReadable`\r\n### `--no-human-readable`\r\n\r\nIf showDir is enabled, add human-readable file sizes. Defaults to **true**.\r\nAliases are `humanreadable` and `human-readable`.\r\n\r\n### `opts.hidePermissions`\r\n### `--hide-permissions`\r\nIf hidePermissions is enabled, file permissions will not be displayed. Defaults to **false**.\r\nAliases are `hidepermissions` and `hide-permissions`.\r\n\r\n### `opts.headers`\r\n### `--H {HeaderA: valA} [--H {HeaderB: valB}]`\r\n\r\nSet headers on every response. `opts.headers` can be an object mapping string\r\nheader names to string header values, a colon (:) separated string, or an array\r\nof colon separated strings.\r\n\r\n`opts.H` and `opts.header` are aliased to `opts.headers` so that you can use\r\n`-H` and `--header` options to set headers on the command-line like curl:\r\n\r\n``` sh\r\n$ ecstatic ./public -p 5000 -H 'Access-Control-Allow-Origin: *'\r\n```\r\n\r\n### `opts.si`\r\n### `--si`\r\n\r\nIf showDir and humanReadable are enabled, print file sizes with base 1000 instead\r\nof base 1024. Name is inferred from cli options for `ls`. Aliased to `index`, the\r\nequivalent option in Apache.\r\n\r\n### `opts.autoIndex`\r\n### `--no-autoindex`\r\n\r\nServe `/path/index.html` when `/path/` is requested.\r\nTurn **off** autoIndexing with `opts.autoIndex === false`. Defaults to **true**.\r\n\r\n### `opts.defaultExt`\r\n### `--defaultExt {ext}`\r\n\r\nTurn on default file extensions with `opts.defaultExt`. If `opts.defaultExt` is\r\ntrue, it will default to `html`. For example if you want a request to `/a-file`\r\nto resolve to `./public/a-file.html`, set this to `true`. If you want\r\n`/a-file` to resolve to `./public/a-file.json` instead, set `opts.defaultExt` to\r\n`json`.\r\n\r\n### `opts.gzip`\r\n### `--no-gzip`\r\n\r\nBy default, ecstatic will serve `./public/some-file.js.gz` in place of\r\n`./public/some-file.js` when the gzipped version exists and ecstatic determines\r\nthat the behavior is appropriate. If `./public/some-file.js.gz` is not valid\r\ngzip, this will fall back to `./public/some-file.js`. You can turn this off\r\nwith `opts.gzip === false`.\r\n\r\n### `opts.brotli`\r\n### `--brotli`\r\n\r\nServe `./public/some-file.js.br` in place of `./public/some-file.js` when the \r\n[brotli encoded](https://github.com/google/brotli) version exists and ecstatic \r\ndetermines that the behavior is appropriate. If the request does not contain \r\n`br` in the HTTP `accept-encoding` header, ecstatic will instead attempt to \r\nserve a gzipped version (if `opts.gzip` is `true`), or fall back to \r\n`./public.some-file.js`. Defaults to **false**.\r\n\r\n### `opts.serverHeader`\r\n### `--no-server-header`\r\n\r\nSet `opts.serverHeader` to false in order to turn off setting the `Server`\r\nheader on all responses served by ecstatic.\r\n\r\n### `opts.contentType`\r\n### `--content-type {type}`\r\n\r\nSet `opts.contentType` in order to change default Content-Type header value.\r\nDefaults to **application/octet-stream**.\r\n\r\n### `opts.mimeTypes`\r\n### `--mime-types {filename}`\r\n\r\nAdd new or override one or more mime-types. This affects the HTTP Content-Type\r\nheader. Can either be a path to a\r\n[`.types`](http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types)\r\nfile or an object hash of type(s).\r\n\r\n    ecstatic({ mimeType: { 'mime-type': ['file_extension', 'file_extension'] } })\r\n\r\n### `opts.handleError`\r\n\r\nTurn **off** handleErrors to allow fall-through with\r\n`opts.handleError === false`, Defaults to **true**.\r\n\r\n### `opts.weakEtags`\r\n### `--no-weak-etags`\r\n\r\nSet `opts.weakEtags` to false in order to generate strong etags instead of\r\nweak etags. Defaults to **true**. See `opts.weakCompare` as well.\r\n\r\n### `opts.weakCompare`\r\n### `--no-weak-compare`\r\n\r\nTurn off weakCompare to disable the weak comparison function for etag\r\nvalidation. Defaults to **true**. See\r\nhttps://www.ietf.org/rfc/rfc2616.txt Section 13.3.3 for more details.\r\n\r\n### `opts.handleOptionsMethod`\r\n### `--handle-options-method`\r\n\r\nSet handleOptionsMethod to true in order to respond to 'OPTIONS' calls with any standard/set headers. Defaults to **false**. Useful for hacking up CORS support.\r\n\r\n### `opts.cors`\r\n### `--cors`\r\n\r\nThis is a **convenience** setting which turns on `handleOptionsMethod` and sets the headers **Access-Control-Allow-Origin: \\*** and **Access-Control-Allow-Headers: Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since**. This *should* be enough to quickly make cross-origin resource sharing work between development APIs. More advanced usage can come either from overriding these headers with the headers argument, or by using the `handleOptionsMethod` flag and then setting headers \"manually.\" Alternately, just do it in your app using separate middlewares/abstractions.\r\n\r\nDefaults to **false**.\r\n\r\n## middleware(req, res, next);\r\n\r\nThis works more or less as you'd expect.\r\n\r\n### ecstatic.showDir(folder);\r\n\r\nThis returns another middleware which will attempt to show a directory view. Turning on auto-indexing is roughly equivalent to adding this middleware after an ecstatic middleware with autoindexing disabled.\r\n\r\n# Tests:\r\n\r\nEcstatic has a fairly extensive test suite. You can run it with:\r\n\r\n```sh\r\n$ npm test\r\n```\r\n\r\n# Contribute:\r\n\r\nWithout outside contributions, ecstatic would wither and die! Before\r\ncontributing, take a quick look at the contributing guidelines in\r\n[./CONTRIBUTING.md](./CONTRIBUTING.md) . They're relatively painless, I promise.\r\n\r\n# License:\r\n\r\nMIT. See LICENSE.txt. For contributors, see CONTRIBUTORS.md\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jfhbrook/node-ecstatic/issues"
  },
  "_id": "ecstatic@3.3.0",
  "dist": {
    "shasum": "d2ce6e2f0847d669aa2fd7e279f2f86d6ada7934"
  },
  "_from": "ecstatic@^3.0.0",
  "_resolved": "https://registry.npmjs.org/ecstatic/-/ecstatic-3.3.0.tgz"
}
